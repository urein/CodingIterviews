思路：
链表是单向的，只能从头到尾访问。但这里要求从尾到头打印链表，这相当于，IFO是典型的栈的特征。

法1：我们可以使用一个辅助栈来保存遍历到的元素，然后依次top并pop。

法2：使用递归。递归的本质就是栈，代码简洁且无须额外空间。但有一个很大的缺点，那就是当链表过长时，超出递归深度可能会导致系统栈溢出。因此程序不如使用辅助栈稳定。



struct ListNode
{
	int m_Value = -1;
	ListNode* m_pNext = nullptr;
};

// 使用辅助栈
void printList(ListNode* pHead)
{
	if (pHead == nullptr)
		return;

	ListNode* pNode = pHead;
	stack<ListNode*> saved;

	while (pNode != nullptr)
	{
		saved.push(pNode);
		pNode = pNode->m_pNext;
	}

	while (!saved.empty())
	{
		int elem = saved.top()->m_Value;
		cout << elem << " ";
		saved.pop();
	}
	cout << endl;
}


// 使用递归
void printList(ListNode* pHead)
{
	// 递归出口
	if (pHead == nullptr)
		return;

	printList(pHead->m_pNext);
	cout << pHead->m_Value << " ";
}


int main()
{
	ListNode nd1;
	ListNode nd2;
	ListNode nd3;
	ListNode nd4;
	ListNode nd5;
	ListNode nd6;

	nd1.m_Value = 1;
	nd2.m_Value = 2;
	nd3.m_Value = 3;
	nd4.m_Value = 4;
	nd5.m_Value = 5;
	nd6.m_Value = 6;

	nd1.m_pNext = &nd2;
	nd2.m_pNext = &nd3;
	nd3.m_pNext = &nd4;
	nd4.m_pNext = &nd5;
	nd5.m_pNext = &nd6;

	printList(&nd1);

	return 0;
}
