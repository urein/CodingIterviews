思路：
斐波那契数列的第n项很好求，关键是不要使用不带记忆搜索的递归，那样会导致大量的重复运算。当n比较大时代码的效率非常低。
比如计算f(5)需要用到f(4)和f(3)，而在计算f(4)时也需要用到f(3)。如果在第一次计算得到f(3)时没有把它记录下来，f(3)就需要被重复地通过递归计算。
这样会导致大量的重复计算。因此如果使用递归，就必须带着记忆搜索，否则使用循环。

下面使用循环来实现，效率非常高。
唯一需要注意的是返回值类型需要使用long long，如果使用int，f(46)之后的结果就计算不出来了。


long long getNthFibonacci(int n)
{
	if (n < 0)
	{
		throw exception("n must be greater than 0");
	}

	if (n == 0)
		return 0;
	if (n == 1)
		return 1;

	long long n1 = 0;
	long long n2 = 1;

	for (int i = 2; i <= n; ++i)
	{
		long long tmp = n1 + n2;
		n1 = n2;
		n2 = tmp;
	}

	return n2;
}


int main()
{
	cout << getNthFibonacci(100) << endl;
	return 0;
}
